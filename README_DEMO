This file contains hints for running the OOI Network system out of this repository.

Prerequisites:
==============

- Git repositories in $CODE_DIR:
  $CODE_DIR/coi-services (this one)
  $CODE_DIR/ion-ux
- Virtualenv and buildout set for coi-services and ion-ux
- ion-ux/config.py properly filled out

Demo setup steps:
=================

Prepare for start:
> ant clean
> bin/buildout
> bin/generate_interfaces

Start the services container with Container UI:
> bin/pycc -fc -r res/deploy/r2deploy.yml --mx

Preload BETA setup (with UI, OOI assets, demo resources); this can take many minutes to complete. Remove path=master
to run against the last known good Google spreadsheet (may be outdated though):
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader cfg=res/preload/r2_ioc/config/ooi_beta.yml path=master

Start the UI (in ion-ux, virtualenv prepared as documented):
> python main.py


Demo steps (using ALPHA preload):
=================================

Go to "CI Bench Test Facility", choose "Platforms", select "Low Power JBox - RSN Bench Testing"
- From commands menu, select command
- Start platform agent, then initialize, go_active, run

Go to "CI Bench Test Facility", choose "Instruments", select "CTD Simulator"
- From commands menu, select command
- Start instrument agent, then initialize, go_active, run


Individual preload commands:
============================

Preload system UI definitions
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=loadui ui_path='http://userexperience.oceanobservatories.org/database-exports/Candidates'

Preload quick demo/test system resources (without OOI resources or UI)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load scenario=BETA

Preload OOI assets (bulk mode)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load assets=res/preload/r2_ioc/ooi_assets loadooi=True bulk=True


Variant steps:
==============

Start the services container and preload with UI (no OOI):
> bin/pycc -fc -r res/deploy/r2demo.yml

Preload system with UI (without OOI assets)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load scenario=BETA,R2_DEMO ui_path='http://userexperience.oceanobservatories.org/database-exports/Stable' attachments=res/preload/r2_ioc/attachments assets=res/preload/r2_ioc/ooi_assets loadui=True

OR: Preload system OOI assets only, create User/Org on the fly; bulk+debug mode not ready for production). Exclude data product etc
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load loadooi=True assets=res/preload/r2_ioc/ooi_assets bulk=True debug=True ooiexclude=DataProduct,DataProductLink,Deployment,Workflow,WorkflowDefinition

OR: Run preload from file (not GoogleDoc master):
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load scenario=BETA,R2_DEMO path=res/preload/r2_ioc/R2PreloadedResources.xlsx ui_path='http://userexperience.oceanobservatories.org/database-exports/Stable' attachments=res/preload/r2_ioc/attachments assets=res/preload/r2_ioc/ooi_assets loadui=True

Delete OOI assets for a retry:
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=deleteooi

To restart services container (without full process relaunch):
> bin/pycc -r res/deploy/r2deploy.yml bootmode=restart

To show debugging UI:
> bin/pycc --mx
or in the shell:
><> start_mx()


Load OOI assets using preload scripts:
======================================

Development OOI load (parse OOI assets, save and print assets report)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader cfg=res/preload/r2_ioc/config/dev_ooi_parse.yml

Development OOI load (debug mode, bulk load)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader cfg=res/preload/r2_ioc/config/dev_ooi_load.yml

Development OOI reload (deleteooi, debug mode, bulk load)
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader cfg=res/preload/r2_ioc/config/dev_ooi_reload.yml

Production OOI load:
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader cfg=res/preload/r2_ioc/config/ooi_load_config.yml

Incremental, idempotent OOI load:
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load loadooi=True path=master ooiuntil="6/30/2014" ooiparams=True ooiupdate=True


Loading Instrument specific resources (requires BETA):
======================================================
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load scenario=CTDBP attachments=res/preload/r2_ioc/attachments
> bin/pycc -x ion.processes.bootstrap.ion_loader.IONLoader op=load scenario=PREST attachments=res/preload/r2_ioc/attachments


Datastore work:
===============

Dump the contents of the resource registry as XLSX file in ./interface/resources_<timestamp>.
> bin/pycc -x ion.processes.bootstrap.datastore_loader.DatastoreLoader op=dumpres


Testing with OOI Data:
======================

- Create directory /tmp/dsatest
- Copy some *.mrg files from test_data/global_glider into /tmp/dsatest
- Edit the External Dataset Agent Instance resource and set driver_config to:
  {"startup_config":{"parser":{},"harvester":{"directory":"/tmp/dsatest","pattern":"unit*.mrg"}},"max_records":50}
- Activate persistence for parsed data product (in stack menu)
- Start instrument (data) agent and execute INITIALIZE, GO_ACTIVE, RUN, AUTOSAMPLE
